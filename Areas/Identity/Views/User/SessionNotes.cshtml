@{
    ViewData["Title"] = "Session Notes";
}

    <div class="row justify-content-start">
        <ul class="nav flex-column col-3 list-unstyled">
            <li class="nav-item">
                <p class="nav-link">Session Plans: @Model.SelectedCampaign.CampaignName</p>
                <hr />
            </li>
            <li class="nav-item">
                <button class="text-success btn btn-link" data-toggle="collapse" data-target="#newSectionArea">New Section +</button>
            </li>
            <li id="newSectionArea" class="nav-item collapse">
                <input id="inputNewSection" type="text" class="form-control" placeholder="Section Title" onfocusout="createNewSection()" />
                <input id="inputCampaignID" class="d-none" value="@Model.SelectedCampaign.CampaignID" />
            </li>
            @foreach (var sessionSection in Model.SessionSections)
            {

                int id = sessionSection.SessionSectionID;

                <li type="nav-item collapse">
                    <button class="text-white btn btn-link" data-toggle="collapse" data-target="#sectionContent@(id)">@sessionSection.SessionSectionName</button>
                    <div id="sectionContent@(id)" class="collapse show">
                        <ul>
                            @if (sessionSection.SessionNotes != null && sessionSection.SessionNotes.Count > 0)
                            {
                                @foreach (var sessionNote in sessionSection.SessionNotes)
                                {
                                    <li type="disc">
                                        <button class="text-white btn btn-link" onclick="selectSessionNote(@(sessionNote.SessionNoteID))">@sessionNote.SessionNoteTitle</button>
                                    </li>
                                }
                            }
                            <li type="disc">
                                <button class="btn btn-link text-success" data-toggle="collapse" data-target="#newNoteArea@(id)">New Note +</button>
                            </li>
                            <li id="newNoteArea@(id)" type="none" class="nav-item collapse">
                                <input id="inputNewNote@(id)" type="text" class="form-control" placeholder="Note Title" onfocusout="createNewNote(@(id))" />
                            </li>
                        </ul>
                    </div>
                </li>
            }
        </ul>

        <!--Session Note Body-->
        <div class="col">
            @if (Model.SelectedNote != null)
            {
                <!-- Modal -->
                <div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content bg-dark">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Session Note Deletion</h5>
                            </div>
                            <div class="modal-body">
                                Are you sure you want to delete this note?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn border border-secondary text-white" data-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" onclick="deleteSelectedNote(@Model.SelectedNote.SessionNoteID)">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="jumbotron bg-dark">
                    <h1 class="display-4">@Model.SelectedNote.SessionNoteTitle</h1>
                    <hr />
                    <div id="sectionNoteBody">
                        <div class="d-flex flex-row-reverse mb-3">
                            <i class="fa fa-trash fa-lg ml-3" type="button" data-toggle="modal" data-target="#confirmDeleteModal"></i>
                            <i class="fas fa-edit fa-lg" type="button" onclick="displayEditNote()"></i>
                        </div>
                        <div id="noteBody">@Html.Raw(Model.SelectedNote.SessionNoteBody)</div>
                    </div>
                    <div id="sectionEditNote" class="text-dark d-none">
                        <form id="sessionNoteForm">
                            <textarea class="form-control" id="textAreaLogBody" rows="10" cols="50" placeholder="When we last left our adventurers..."></textarea>
                            <button class="btn border border-success text-success mt-3 float-right" type="submit">Update</button>
                            <input class="d-none" id="sessionNoteFormId" value="@Model.SelectedNote.SessionNoteID" />
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>

<script>

    function deleteSelectedNote(selectedNoteId) {

        fetch("api/SessionNote/" + selectedNoteId, {
            method: 'DELETE'
        })
            .then(() => location.reload())
            .catch(() => console.log("Failed to delete item"));

    }

    function displayEditNote() {

        $("#sectionNoteBody").toggleClass("d-none");
        $("#sectionEditNote").toggleClass("d-none");
        var currentNoteBodyText = $("#noteBody").html();
        $("#textAreaLogBody").html(currentNoteBodyText);
        attachEditor();

    }

    function attachEditor() {

        let editor;

        ClassicEditor
            .create(document.querySelector('#textAreaLogBody'))
            .then(newEditor => {
                editor = newEditor;
            })
            .catch(error => {
                console.error(error);
            });

        let logForm = $("#sessionNoteForm");

        logForm.on("submit", async function (evt) {
            let editorData = editor.getData();

            evt.preventDefault();

            item = {

                sessionNoteBody: editorData,
                sessionNoteID: parseInt($("#sessionNoteFormId").val(), 10)
            }

            fetch("api/SessionNote/EditNote", {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(item)
            })
                .then(() => location.reload())
                .catch(() => console.log("Failed to update item"));

        });

    }


    function createNewSection() {

        item = {

            sessionSectionName: $("#inputNewSection").val(),
            campaignID: parseInt($("#inputCampaignID").val(), 10)
        }

        fetch("api/SessionSection", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(item)
        })
            .then((response) => response.json())
            .then(() => location.reload())
            .catch(() => console.log("Failed to create item"));
    }

    function createNewNote(sessionSectionID) {

        item = {

            sessionNoteTitle: $("#inputNewNote" + sessionSectionID).val(),
            campaignID: parseInt($("#inputCampaignID").val(), 10),
            sessionSectionID: parseInt(sessionSectionID, 10)
        }

        fetch("api/SessionNote", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(item)
        })
            .then((response) => response.json())
            .then(() => location.reload())
            .catch(() => console.log("Failed to create item"));
    }

    function selectSessionNote(sessionNoteID) {

        fetch("api/SessionNote/" + sessionNoteID, {
            method: 'PUT',
        })
            .then(() => location.reload())
            .catch(() => console.log("Failed to update item"));

    }

</script>