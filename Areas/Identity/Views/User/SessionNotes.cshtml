
@{
    ViewData["Title"] = "Session Notes";
}

<style>

    .modal-backdrop {
        opacity: 0 !important;
    }

    body {
        height: 100vh;
        overflow-x: hidden;
    }

    /* set the sidebar width */
    .w-sidebar {
        width: 200px;
        max-width: 200px;
    }

    .row.collapse {
        margin-left: -200px;
        left: 0;
        transition: margin-left .15s linear;
    }

        .row.collapse.show {
            margin-left: 0 !important;
        }

    .row.collapsing {
        margin-left: -200px;
        left: -0.05%;
        transition: all .15s linear;
    }

    /* optional */
    .vh-100 {
        min-height: 100vh;
    }

    /* optional for overlay sidebar on small screens */
    @@media (max-width:768px) {

        .row.collapse,
        .row.collapsing {
            margin-left: 0 !important;
            left: 0 !important;
            overflow: visible;
        }

        .row > .sidebar.collapse {
            display: flex !important;
            margin-left: -100% !important;
            transition: all .3s linear;
            position: fixed;
            z-index: 1050;
            max-width: 0;
            min-width: 0;
            flex-basis: auto;
        }

            .row > .sidebar.collapse.show {
                margin-left: 0 !important;
                width: 100%;
                max-width: 100%;
                min-width: initial;
            }

        .row > .sidebar.collapsing {
            display: flex !important;
            margin-left: -10% !important;
            transition: all .2s linear !important;
            position: fixed;
            z-index: 1050;
            min-width: initial;
        }
    }
</style>
@if (Model.SelectedCampaign.IsSelectedCampaign == true)
{
    <body>
        <div class="row collapse show no-gutters d-flex h-100 position-relative">
            <div class="col-3 px-0 w-sidebar navbar-collapse collapse d-none d-md-flex">
                <!-- spacer col -->
            </div>
            <div class="col px-2 px-md-0">
                <!-- toggler -->
                <a id="openSideNav" onclick="toggleNavBarScrollAndIcons()" data-toggle="collapse" data-target="#planSideNav" role="button" class="p-1 d-lg-none">
                    Sections
                    <i id="iconNavBarOpen" class="far fa-arrow-alt-circle-right fa-lg text-white" type="button"></i>
                    <i id="iconNavBarClose" class="far fa-arrow-alt-circle-left fa-lg text-white d-none" type="button"></i>
                </a>
            </div>
        </div>
        <div class="row vh-100 collapse show no-gutters d-flex h-100 position-relative">

            <div id="planSideNav" class="col-3 p-0 h-100 w-sidebar navbar-collapse collapse d-none d-md-flex sidebar" style="background-color: #121212">
                <!-- fixed sidebar -->
                <div class="position-fixed text-white h-100 w-sidebar pl-2">
                    <ul class="list-unstyled mt-3">
                        <li class="nav-item">
                            <a data-toggle="modal" data-target="#manageSectionsModal" role="button" class="p-1">
                                Manage Sections
                                <i class="fas fa-tasks fa-lg text-white" type="button"></i>
                            </a>
                        </li>
                        <li class="nav-item">
                            <button class="text-success btn btn-link" data-toggle="collapse" data-target="#newSectionArea">New Section +</button>
                        </li>
                        <li id="newSectionArea" class="nav-item collapse">
                            <input id="inputNewSection" type="text" class="form-control" placeholder="Section Title" onfocusout="createNewSection()" />
                            <input id="inputCampaignID" class="d-none" value="@Model.SelectedCampaign.CampaignID" />
                        </li>
                        @foreach (var sessionSection in Model.SessionSections)
                        {

                            int id = sessionSection.SessionSectionID;

                            <li type="nav-item collapse">
                                <button class="text-white btn btn-link" data-toggle="collapse" data-target="#sectionContent@(id)">@sessionSection.SessionSectionName</button>
                                <div id="sectionContent@(id)" class="collapse show">
                                    <ul>
                                        @if (sessionSection.SessionNotes != null && sessionSection.SessionNotes.Count > 0)
                                        {
                                            @foreach (var sessionNote in sessionSection.SessionNotes)
                                            {
                                                <li type="disc">
                                                    <button class="text-white btn btn-link" onclick="selectSessionNote(@(sessionNote.SessionNoteID))">@sessionNote.SessionNoteTitle</button>
                                                </li>
                                            }
                                        }
                                        <li type="disc">
                                            <button class="btn btn-link text-success" data-toggle="collapse" data-target="#newNoteArea@(id)">New Note +</button>
                                        </li>
                                        <li id="newNoteArea@(id)" type="none" class="nav-item collapse">
                                            <input id="inputNewNote@(id)" type="text" class="form-control" placeholder="Note Title" onenter onfocusout="createNewNote(@(id))" />
                                        </li>
                                    </ul>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <!-- fixed sidebar -->

            <div class="col p-3">
                @if (Model.SelectedNote != null)
                {
                    <!-- Modal Confirm Delete -->
                    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content" style="background-color: #1F1B24">
                                <div class="modal-body">
                                    Are you sure you want to delete this note?
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn border border-secondary text-white" data-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-danger" onclick="deleteSelectedNote(@Model.SelectedNote.SessionNoteID)">Delete</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Modal Confirm Delete -->

                    <!-- Session Note Content -->
                    <div class="jumbotron" style="background-color: #121212">
                        <h1 id="sessionNoteName" class="display-4">@Model.SelectedNote.SessionNoteTitle</h1>
                        <input id="inputUpdateSessionNoteName" class="form-control d-none" />
                        <hr />
                        <div id="sectionNoteBody">
                            <div class="d-flex flex-row-reverse mb-3">
                                <button class="btn border text-white" data-toggle="modal" data-target="#confirmDeleteModal">
                                    Delete
                                    <i class="fa fa-trash fa-lg ml-3" type="button"></i>
                                </button>
                                <button class="btn border text-white mr-1" onclick="displayEditNote()">
                                    Edit
                                    <i class="fas fa-edit fa-lg ml-3" type="button"></i>
                                </button>
                            </div>
                            <div id="noteBody">
                                @Html.Raw(Model.SelectedNote.SessionNoteBody)
                            </div>
                            @if (Model.SelectedNoteRelatedMap != null)
                            {
                                <a href="~/UserContent/@Model.SelectedNoteRelatedMap.FilePath">
                                    <img class="img-fluid mt-5" src="~/UserContent/@Model.SelectedNoteRelatedMap.FilePath" />
                                </a>
                            }
                        </div>
                        <div id="sectionEditNote" class="text-dark d-none">
                            <form id="sessionNoteForm">
                                <textarea class="form-control" id="textAreaLogBody" rows="10" cols="50" placeholder="When we last left our adventurers..."></textarea>
                                <button class="btn border border-success text-success mt-3" type="submit">Update</button>
                                <input class="d-none" id="sessionNoteFormId" value="@Model.SelectedNote.SessionNoteID" />
                            </form>
                            <div class="dropdown">
                                <button class="btn border text-white dropdown-toggle mt-3" type="button" id="dropdownMenuButton" data-toggle="dropdown">
                                    Map
                                </button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                    <a class="dropdown-item" href="@Url.Content($"~/Identity/User/LinkMap?note={Model.SelectedNote.SessionNoteID}")">Add an Existing Map</a>
                                    <a class="dropdown-item" href="@Url.Content($"~/Identity/User/NewMap?note={Model.SelectedNote.SessionNoteID}")">Add a New Map</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Session Note Content -->
                }
            </div>
        </div>
        <!-- Modal Manage Sections -->
        <div class="modal fade" id="manageSectionsModal" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content" style="background-color: #1F1B24">
                    <div class="modal-body">

                        @if (Model.SessionSections.Count > 0)
                        {
                            <table class="table table-dark table-hover" style="background-color: #1F1B24">
                                <thead>
                                    <tr>
                                        <th>Manage Sections</th>
                                        <th></th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="tbodyManageSections">
                                    @foreach (var sessionSection in Model.SessionSections)
                                    {
                                        var id = sessionSection.SessionSectionID;

                                        <tr>
                                            <td>
                                                <div id="manageSectionName@(id)">@sessionSection.SessionSectionName</div>
                                                <input id="inputManageSectionName@(id)" class="form-control d-none" />
                                            </td>
                                            <td>
                                                <button id="btnEditSectionName@(id)" class="btn text-white" type="button" onclick="displayEditSectionName(@(id))">
                                                    <i class="fas fa-edit fa-sm"></i>
                                                </button>
                                            </td>
                                            <td>
                                                <button id="btnDeleteSectionName@(id)" class="btn text-white" onclick="displayDeleteSectionName(@id)" type="button">
                                                    <i class="fa fa-trash fa-sm"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <h5 class="text-center">No Sections Found.</h5>
                        }

                    </div>
                    <div class="modal-footer">
                        <div id="manageSectionMessage" class="d-none text-warning"></div>
                        <button type="button" class="btn border border-secondary text-white" data-dismiss="modal">Close</button>
                        <button id="btnManageSectionUpdate" type="button" class="btn border border-success text-success d-none">Update</button>
                        <button id="btnManageSectionDelete" type="button" class="btn border border-danger text-danger d-none">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Modal Manage Sections -->
    </body>
}
else
{
    <p>You don't have any active campaigns.</p>
    <a href="@Url.Content($"~/Identity/User/CampaignList")">Start a campaign first!</a>
}



<script>

    function displayDeleteSectionName(sessionSectionId) {

        let sectionName = $("#manageSectionName" + sessionSectionId)
        let input = $("#inputManageSectionName" + sessionSectionId)
        let message = $("#manageSectionMessage");
        let btnDelete = $("#btnDeleteSectionName" + sessionSectionId);
        let btnEdit = $("#btnEditSectionName" + sessionSectionId);

        message.text("Enter the name of the section and click delete to confirm");

        sectionName.toggleClass("d-none");
        input.toggleClass("d-none")
        message.toggleClass("d-none");
        $("#btnManageSectionDelete").toggleClass("d-none");

        if (btnEdit.prop("disabled")) {

            $("#tbodyManageSections").find("button").prop("disabled", false);

        } else {

            $("#tbodyManageSections").find("button").prop("disabled", true);
            btnDelete.prop("disabled", false)

        }

        input.attr("placeholder", sectionName.text())
        input.focus()

        $("#btnManageSectionDelete").on("click", async function (evt) {

            let confirmSectionName = $("#inputManageSectionName" + sessionSectionId).val();

            if (confirmSectionName == sectionName.text()) {

                fetch("api/SessionSection/" + sessionSectionId, {
                    method: 'DELETE',
                })
                    .then(() => location.reload())
                    .catch(() => console.log("Failed to delete session section"));


            } else {

                message.text("Name does not match.");
                message.addClass("text-danger");

            }

        });


    }

    function displayEditSectionName(sessionSectionId) {

        let currentName = $("#manageSectionName" + sessionSectionId);
        let input = $("#inputManageSectionName" + sessionSectionId);
        let btnDelete = $("#btnDeleteSectionName" + sessionSectionId);
        let btnEdit = $("#btnEditSectionName" + sessionSectionId);

        currentName.toggleClass("d-none");
        input.toggleClass("d-none");
        $("#btnManageSectionUpdate").toggleClass("d-none");

        if (btnDelete.prop("disabled")) {

            $("#tbodyManageSections").find("button").prop("disabled", false);

        } else {

            $("#tbodyManageSections").find("button").prop("disabled", true);
            btnEdit.prop("disabled", false)

        }

        input.val(currentName.text())
        input.focus();

        $("#btnManageSectionUpdate").on("click", async function (evt) {

            let updatedSessionSectionName = $("#inputManageSectionName" + sessionSectionId).val();

            item = {

                sessionSectionID: parseInt(sessionSectionId, 10),
                sessionSectionName: updatedSessionSectionName

            }

            fetch("api/SessionSection/" + sessionSectionId, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(item)
            })
                .then(() => location.reload())
                .catch(() => console.log("Failed to update session section name"));

        });
    }

    function deleteSelectedNote(selectedNoteId) {

        fetch("api/SessionNote/" + selectedNoteId, {
            method: 'DELETE'
        })
            .then(() => location.reload())
            .catch(() => console.log("Failed to delete item"));

    }

    function displayEditNote() {

        $("#sectionNoteBody").toggleClass("d-none");
        $("#sectionEditNote").toggleClass("d-none");
        let currentNoteBodyText = $("#noteBody").html();
        $("#textAreaLogBody").html(currentNoteBodyText);
        attachEditor();

    }

    function attachEditor() {

        let editor;

        ClassicEditor
            .create(document.querySelector('#textAreaLogBody'))
            .then(newEditor => {
                editor = newEditor;
            })
            .catch(error => {
                console.error(error);
            });

        let nameInput = $("#inputUpdateSessionNoteName");
        let noteName = $("#sessionNoteName");

        nameInput.toggleClass("d-none")
        noteName.toggleClass("d-none");
        nameInput.val(noteName.text());

        let logForm = $("#sessionNoteForm");

        logForm.on("submit", async function (evt) {
            let editorData = editor.getData();

            evt.preventDefault();

            item = {

                sessionNoteTitle: $("#inputUpdateSessionNoteName").val(),
                sessionNoteBody: editorData,
                sessionNoteID: parseInt($("#sessionNoteFormId").val(), 10)
            }

            fetch("api/SessionNote/EditNote", {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(item)
            })
                .then(() => location.reload())
                .catch(() => console.log("Failed to update item"));

        });
    }

    function createNewSection() {

        item = {

            sessionSectionName: $("#inputNewSection").val(),
            campaignID: parseInt($("#inputCampaignID").val(), 10)
        }

        fetch("api/SessionSection", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(item)
        })
            .then((response) => response.json())
            .then(() => location.reload())
            .catch(() => console.log("Failed to create item"));
    }

    function createNewNote(sessionSectionID) {

        item = {

            sessionNoteTitle: $("#inputNewNote" + sessionSectionID).val(),
            campaignID: parseInt($("#inputCampaignID").val(), 10),
            sessionSectionID: parseInt(sessionSectionID, 10)
        }

        fetch("api/SessionNote", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(item)
        })
            .then((response) => response.json())
            .then(() => location.reload())
            .catch(() => console.log("Failed to create item"));
    }

    function selectSessionNote(sessionNoteID) {

        fetch("api/SessionNote/" + sessionNoteID, {
            method: 'PUT',
        })
            .then(() => location.reload())
            .catch(() => console.log("Failed to update item"));

    }

</script>
