
@{
    ViewData["Title"] = "Campaigns";
}

<style>

    .modal-backdrop {
        opacity: 0 !important;
    }

    body {
        height: 100vh;
        overflow-x: hidden;
    }

    /* set the sidebar width */
    .w-sidebar {
        width: 200px;
        max-width: 200px;
    }

    .row.collapse {
        margin-left: -200px;
        left: 0;
        transition: margin-left .15s linear;
    }

    .row.collapse.show {
        margin-left: 0 !important;
    }

    .row.collapsing {
        margin-left: -200px;
        left: -0.05%;
        transition: all .15s linear;
    }

    /* optional */
    .vh-100 {
        min-height: 100vh;
    }

    /* optional for overlay sidebar on small screens */
    @@media (max-width:768px) {

        .row.collapse,
        .row.collapsing {
            margin-left: 0 !important;
            left: 0 !important;
            overflow: visible;
        }

        .row > .sidebar.collapse {
            display: flex !important;
            margin-left: -100% !important;
            transition: all .3s linear;
            position: fixed;
            z-index: 1050;
            max-width: 0;
            min-width: 0;
            flex-basis: auto;
        }

        .row > .sidebar.collapse.show {
            margin-left: 0 !important;
            width: 100%;
            max-width: 100%;
            min-width: initial;
        }

        .row > .sidebar.collapsing {
            display: flex !important;
            margin-left: -10% !important;
            transition: all .2s linear !important;
            position: fixed;
            z-index: 1050;
            min-width: initial;
        }
    }
</style>

<body>
    <div class="row collapse show no-gutters d-flex h-100 position-relative">
        <div class="col-3 px-0 w-sidebar navbar-collapse collapse d-none d-md-flex">
            <!-- spacer col -->
        </div>
        <div class="col px-2 px-md-0">
            <!-- toggler -->
            <a id="openSideNav" onclick="toggleNavBarScrollAndIcons()" data-toggle="collapse" data-target="#planSideNav" role="button" class="p-1 d-lg-none">
                Campaign List
                <i id="iconNavBarOpen" class="far fa-arrow-alt-circle-right fa-lg text-white" type="button"></i>
                <i id="iconNavBarClose" class="far fa-arrow-alt-circle-left fa-lg text-white d-none" type="button"></i>
            </a>
        </div>
    </div>
    <div class="row vh-100 collapse show no-gutters d-flex h-100 position-relative">

        <div id="planSideNav" class="col-3 p-0 h-100 w-sidebar navbar-collapse collapse d-none d-md-flex sidebar" style="background-color: #121212">
            <!-- fixed sidebar -->
            <div class="position-fixed text-white h-100 w-sidebar pl-2">
                <ul class="list-unstyled mt-3">
                    @foreach (var campaign in Model.Campaigns)
                    {
                        <li type="disc mb-3">
                            <button class="btn btn-link text-white" href="#" onclick="selectCampaign(@campaign.CampaignID)">@campaign.CampaignName</button>
                        </li>
                    }
                    <li class="nav-item">
                        <button class="text-success btn btn-link" data-toggle="collapse" data-target="#newCampaignArea">New Campaign +</button>
                    </li>
                    <li id="newCampaignArea" class="nav-item collapse">
                        <div class="input-group mb-3">
                            <input id="inputCampaignName" type="text" class="form-control" placeholder="Campaign Name" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" onclick="CreateCampaign()">
                                    <i class="fa fa-check text-white"></i>
                                </button>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col p-3">
            @if (Model.SelectedCampaign != null)
            {
                <div class="jumbotron" style="background-color: #121212">
                    <h4 id="campaignName" class="display-5 text-center">@Model.SelectedCampaign.CampaignName</h4>
                    <input id="inputEditCampaignName" class="form-control d-none" />
                    <hr />
                    <div id="campaignBody">
                        <div class="d-flex flex-row-reverse mb-3">
                            <i class="fa fa-trash fa-lg ml-3" type="button" data-toggle="modal" data-target="#confirmDeleteModal"></i>
                            <i class="fas fa-edit fa-lg" type="button" onclick="displayEditCampaign()"></i>
                        </div>
                        <div id="campaignDescription">@Html.Raw(Model.SelectedCampaign.CampaignDescription)</div>
                    </div>
                    <div id="areaEditCampaign" class="d-none text-dark">
                        <textarea id="textAreaCampaignDescription"></textarea>
                        <button id="btnUpdateCampaign" class="btn text-success border border-success">Update</button>
                        <input id="selectedCampaignID" class="d-none" value="@Model.SelectedCampaign.CampaignID" />
                    </div>
                </div>

                <!-- Modal Confirm Delete -->
                <div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content" style="background-color: #1F1B24">
                            <div class="modal-body text-center">
                                <h5>Are you sure you want to delete this campaign?</h5>
                                <p>You will lose all notes, adventure logs, and maps.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn border border-secondary text-white" data-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" onclick="deleteCampaign(@Model.SelectedCampaign.CampaignID)">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Modal Confirm Delete -->
            }
        </div>
    </div>
</body>

@*<script>

    const uri = "api/Campaigns/";
    const inputAddCampaign = $("#inputCampaignName");
    const formData = new FormData();

    function CreateCampaign()
    {

        item = {

            campaignName: inputAddCampaign.val(),

        }

        fetch(uri, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(item)
        })
            .then((response) => response.json())
            .then(() => location.reload())
            .catch(() => console.log("Failed to create item"));
    }

    function displayEditCampaign() {

        $("#campaignBody").toggleClass("d-none");
        $("#areaEditCampaign").toggleClass("d-none");
        let currentCampaignDescription = $("#campaignDescription").html();
        $("#textAreaCampaignDescription").html(currentCampaignDescription);
        attachEditor();

    }

    function attachEditor() {

        let editor;

        ClassicEditor
            .create(document.querySelector('#textAreaCampaignDescription'))
            .then(newEditor => {
                editor = newEditor;
            })
            .catch(error => {
                console.error(error);
            });

        let nameInput = $("#inputEditCampaignName");
        let campaignName = $("#campaignName");

        nameInput.toggleClass("d-none")
        campaignName.toggleClass("d-none");
        nameInput.val(campaignName.text());

        $("#btnUpdateCampaign").on("click", async function (evt) {
            let editorData = editor.getData();

            evt.preventDefault();

            item = {

                campaignID: parseInt($("#selectedCampaignID").val(), 10),
                campaignName: $("#inputEditCampaignName").val(),
                campaignDescription: editorData,
            }

            fetch("api/Campaigns", {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(item)
            })
                .then(() => location.reload())
                .catch(() => console.log("Failed to update item"));

        });
    }


    function selectCampaign(id) {


        fetch(uri + id, {
            method: 'PUT',
        })
            .then(() => location.reload())
            .catch(() => console.log("Failed to update item"));
    }

    function deleteCampaign(id) {

        fetch(uri + id, {
            method: 'DELETE'
        })
            .then(() => location.reload())
            .catch(() => console.log("Failed to delete item"));

    }

</script>*@
